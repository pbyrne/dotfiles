" set up pathogen
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" general
"let mapleader = ","
set nocompatible " enable lots of cool vim-only features
syntax enable " enable syntax highlighting
set encoding=utf-8 " default encoding
set showcmd " display incomplete commands
filetype plugin indent on " load file type plugins and indentation
set showmatch " highlight the matching {("/")}
set backupdir=~/.vim/_backup " specify location for backup files
set directory=~/.vim/_swp " specify location for swp files
set relativenumber " relative line numbers; if you care about aboslute, look at the status bar
set cursorline " highlight the current line
" set autoindent " perform auto-indentation
set shiftround " round to the nearest tabstop when tabbing
set scrolloff=3 " start scrolling within 3 lines of the edge of the window
set title " show a window title, even in command-line vim
set visualbell " eliminate audio bells
set hidden " allow an unsaved buffer to become hidden (no longer the visible), and load its marks and undo history upon becoming visible again
set history=1000 " store command history FOREVER

" whitespace settings
set nowrap " don't wrap lines
set tabstop=2 shiftwidth=2 softtabstop=2 " 2 spaces for tabs
set expandtab " use spaces, not tabs
set backspace=indent,eol,start " backspace through everything
set list " display whitespace characters
set listchars=tab:\ \ ,trail:Â· " tabs, spaces, trailing whitespace

" searching
set hlsearch " highlight matches
set incsearch " search incrementally
set ignorecase " case-insensitive search
set smartcase " unless there's a capital later

" status bar
set ruler " enable status bar at the bottom
set laststatus=2 " Status bar
" eliminate some extraneous garbage from messages
" a to truncate text as much as possible
" t to eliminate long file names
" I to skip vim's intro message
set shortmess=atI

" Tab completion
set wildmenu " enable tab completion
set wildmode=list:longest,list:full " promiscuous selection of available completions
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn " ignore these files for completion
set wildignore+=*.png,*.jpg,*.gif,*.ico,*.swf,*.psd,*.gem " and these binaries, too. mainly for command-t
set wildignore+=_site,cache,tmp " and auto-generated files
set wildignore+=_undo,_swp,_backup " and vim's backups
set wildignore+=node_modules " and npm-installed modules

" window splitting settings
set splitbelow
set splitright

" Default color scheme
set t_Co=256 " 256 colors
set background=dark
" colorscheme Tomorrow-night
colorscheme lucius

" Undo settings, if available
if has("persistent_undo")
  set undodir=~/.vim/_undo " specify location of undo files

  set undofile " persistent undo, even after closing and saving
  set undolevels=1000 "maximum number of changes that can be undone
  set undoreload=10000 "maximum number lines to save for undo on a buffer reload
endif

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" % to bounce from do to end etc.
" also necessary for textobj-rubyblock
runtime! macros/matchit.vim

" force you to Do The Right Thing (don't use arrows to move)
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" iTerm hates the number pad
" turning these mappings off temporarily; i almost never use them, and it
" gives me lag when I escape out of insert mode and hit O to insert a newline
" above current position
" :imap <Esc>Oq 1
" :imap <Esc>Or 2
" :imap <Esc>Os 3
" :imap <Esc>Ot 4
" :imap <Esc>Ou 5
" :imap <Esc>Ov 6
" :imap <Esc>Ow 7
" :imap <Esc>Ox 8
" :imap <Esc>Oy 9
" :imap <Esc>Op 0
" :imap <Esc>On .
" :imap <Esc>OQ /
" :imap <Esc>OR *
" :imap <Esc>Ol +
" :imap <Esc>OS -

" Custom shortcuts
" use sane (not the vim-default) regexes in search
nnoremap / /\v
" use sane (not the vim-default) regexes in search
vnoremap / /\v
" clear the search term
nnoremap <leader><space> :noh<cr>
" close windows other than the current
map <Leader>w :ZoomWin<CR>
" shortcuts for beginning and end of the line
nnoremap <Leader>h ^
nnoremap <Leader>l $
" jj to escape insert mode
inoremap jj <ESC>

" open the .vimrc
noremap <Leader>` :sp $MYVIMRC<CR>
" and reload it automatically when saving it
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END


" emulate MacVim keybindings
noremap <Leader>s :w<CR>
inoremap <Leader>s <ESC>:w<CR>i
noremap <Leader>S :W<CR>
noremap <Leader>S <ESC>:W<CR>i
" the "* register is the system clipboard
" cut the selection, if selected
vnoremap <Leader>x "*d
" cut the line if not in selection
nnoremap <Leader>x "*dd
inoremap <Leader>x <ESC>"*di
" copy the selection, if selected
vnoremap <Leader>c "*y
" copy the line, if not in selection
nnoremap <Leader>c "*yy
inoremap <Leader>c <ESC>"*yi
" paste
noremap <Leader>v "*p
inoremap <Leader>v <ESC>"*pi
" paste before
noremap <Leader>V "*P
inoremap <Leader>V <ESC>"*Pi

" automatically strip whitespace from ends of ruby and ERB files
"autocmd BufWritePre *.rb,*.erb :%s/\s\+$//e
nmap <Leader>WS :%s/\s\+$//e<CR>
imap <Leader>WS :%s/\s\+$//e<CR>

if $VIM_CRONTAB == "true"
set nobackup " don't back up, causes issues editing crontabs
set nowritebackup " disabling other backup feature
syntax off " my colorscheme's syntax highlighting in crontab is redongculous
endif

set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%y\ %-14.(%l,%c%V%)\ %P

" Command-T settings
let g:CommandTMaxHeight=20 " max height of list of matches
let g:CommandTMaxFiles=100000 " Increase Max Files in Command-T List (from default of 10,000)

" Unimpaired shortcuts
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv



" CTags shortcuts
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
" open definition in a new tab
map <C-\> :sp <CR>:exec("tag ".expand("<cword>"))<CR>

" Create the tag on multiple lines: e.g.
" <p>
"   |
" </p>
" instead of
" <p>|</p>
imap <Leader>e <C-e><CR><ESC>O

" test running
" lifted from https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
map <leader>t :call RunTestFile()<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo -----------------------
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" get out of here!
:command! -bang Q :qa<bang>
:command! -bang WQ :wa | :qa<bang>

" ack
noremap <Leader>a :Ack<space>
" ack for current word (based on cursor)
map <Leader>A :Ack<space><C-r><C-w>

" disable some delimitmate mappings which cause a delay when hitting <ESC>O
" (which creates a new line above the current, while in insert mode)
let delimitMate_no_esc_mapping = 1

" make %% map to the directory path containing the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" command-t
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>
" are these overkill? '<Leader>f apmo' should do the trick, right?
map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gf :CommandTFlush<cr>\|:CommandT features<cr>

" Leader-][ to increase/decrease indentation
vmap <Leader>] >gv
vmap <Leader>[ <gv

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" loop through the open windows
nnoremap <c-i> <c-w>w

" autoresize plugin configuration
let g:AUTORESIZE_ANOTHER_WINDOW_HEIGHT = 10
let g:AUTORESIZE_ANOTHER_WINDOW_WIDTH = 10


if has("autocmd")
  " Remember last location in file
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif

  " maps .. to move up a directory when in Fugitive's Gedit view on a folder
  autocmd User fugitive
    \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
    \   nnoremap <buffer> .. :edit %:h<CR> |
    \ endif

  " delete a Gedit view from the buffer list when leaving it
  autocmd BufReadPost fugitive://* set bufhidden=delete

  " exit out of vimdiff mode from a fugitive diff, ugly and hacky but it works
  " from http://stackoverflow.com/questions/2703644/how-do-you-exit-vimdiff-mode-in-vim
  function! MyCloseDiff()
    if (&diff == 0 || getbufvar('#', '&diff') == 0)
          \ && (bufname('%') !~ '^fugitive:' && bufname('#') !~ '^fugitive:')
      echom "Not in diff view."
      return
    endif

    " close current buffer if alternate is not fugitive but current one is
    if bufname('#') !~ '^fugitive:' && bufname('%') =~ '^fugitive:'
      if bufwinnr("#") == -1
        b #
        bd #
      else
        bd
      endif
    else
      bd #
    endif
  endfunction
  nnoremap <Leader>dd :call MyCloseDiff()<cr>
  
  " make uses real tabs
  autocmd FileType make set noexpandtab
  
  " Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,*.term,Guardfile}    set ft=ruby
  
  " *.md are markdown
  autocmd BufRead,BufNewFile *.md set ft=markdown
  
  " json is really just javascript
  autocmd BufNewFile,BufRead *.json set ft=javascript
  
  " clean up quickfix (e.g., Ack) output
  autocmd Filetype qf setlocal colorcolumn=0 nolist nocursorline nowrap
  
  " make python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
  autocmd FileType python  set tabstop=4 textwidth=79
  
  " automatically leave insert mode after 15 seconds of inactivity
  autocmd CursorHoldI * stopinsert
  autocmd InsertEnter * let updaterestore=&updatetime | set updatetime=15000
  autocmd InsertLeave * let &updatetime=updaterestore
endif

"""""""""""""""""""""""""""""""
" Highlight Trailing Whitespace
"""""""""""""""""""""""""""""""

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

