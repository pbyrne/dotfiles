#!bash

set -e # Exit on first failure

main() {
  local cmd="$1"
  local arg1="$2"
  local arg2="$3"

  case "$cmd" in
    instances) list_instances $arg1;;
    layers) list_layers $arg1;;
    ssh) connect_with_ssh $arg1 $arg2;;
    ssh-tunnel) establish_ssh_tunnel $arg1 $arg2;;
    stacks) list_stacks;;
    *) usage;;
  esac
}

function _echoerr() {
  echo "$*" >&2
}

function _choose_instance() {
  verify_dependencies

  local stackId=$1
  local query=$2

  aws --region us-east-1 opsworks describe-instances --stack-id=$stackId |
    jq --raw-output '.Instances[] | "\(.Hostname)|\(.PublicIp)|\(.InstanceId)"' |
    sort -r |
    column -t -s'|' |
    fzf --select-1 --exit-0 --query=$query |
    awk -F' ' '{print $NF}'
}

function _choose_stack() {
  verify_dependencies

  local query=$1 # optional

  aws --region us-east-1 opsworks describe-stacks |
    jq --raw-output '.Stacks[] | .Name + "|" + .StackId' |
    sort -r |
    column -t -s'|' |
    fzf --select-1 --exit-0 --query=$query |
    awk -F' ' '{print $NF}'
}

function _choose_layer() {
  verify_dependencies

  local stackId=$1
  local query=$2 # optional

  if [ -z $stackId ]; then
    _exit_failure_code "Must select a stack to choose a layer"
  fi

  aws --region us-east-1 opsworks describe-layers --stack-id=$stackId |
    jq --raw-output '.Layers[] | .Name + "|" + .LayerId' |
    sort -r |
    column -t -s'|' |
    fzf --select-1 --exit-0 --query=$query |
    awk -F' ' '{print $NF}'
}

function _exit_failure_code () {
  _echoerr "$*"
  exit 1
}

function _fetch_username() {
  verify_dependencies

  aws --region us-east-1 opsworks describe-my-user-profile |
    jq --raw-output .UserProfile.SshUsername
}

function _fetch_instance_details() {
  verify_dependencies

  instanceId=$1
  field=$2

  aws --region us-east-1 opsworks describe-instances --instance-id=$instanceId |
    jq --raw-output ".Instances[0].$field"
}

function verify_dependencies() {
  command -v jq >/dev/null 2>&1 || _exit_failure_code "This leverages the 'jq' command-line tool for parsing JSON. Install it."
  command -v aws >/dev/null 2>&1 || _exit_failure_code "This leverages the 'aws' command-line tool for communicating with AWS's API. Install it."
  command -v fzf >/dev/null 2>&1 || _exit_failure_code "This leverages the 'fzf' command-line tool for choosing options. Install it."
}

function usage() {
  echo "$(basename $0) (instances layers ssh ssh-tunnel stacks)"
  echo
  column -s'|' -t <<-EOH
  instances [STACK]|list instances in a given Opsworks stack
  layers [STACK]|list layers in a given Opsworks stack
  ssh [STACK]|SSH to an instance
  ssh-tunnel [STACK]|Establish an SSH tunnel to an instance
  stacks|list Opsworks stacks
EOH
}

function establish_ssh_tunnel() {
  local stackQuery=$1
  local instanceQuery=$2
  local stackId=$(_choose_stack $stackQuery)
  local instanceId=$(_choose_instance $stackId $instanceQuery)

  local username=$(_fetch_username)
  local instanceIp=$(_fetch_instance_details $instanceId PublicIp)

  local db_host=$(ssh $username@$instanceIp 'source .bashrc.d/rails.sh; printenv DATABASE_HOST')
  local db_user=$(ssh $username@$instanceIp 'source .bashrc.d/rails.sh; printenv DATABASE_USERNAME')
  local db_pass=$(ssh $username@$instanceIp 'source .bashrc.d/rails.sh; printenv DATABASE_PASSWORD')
  local db_local_port=3333
  local pgpass="localhost:$db_local_port:$db_user:$db_user:$db_pass"

  echo Adding ~/.pgpass entry…
  # Add line only if not already there; -q quiet/no output; -x full-line match; -F plain-text match
  grep -qxF -- $pgpass ~/.pgpass || echo $pgpass >> ~/.pgpass

  echo Update your connection to use:
  echo   host: localhost
  echo   port: $db_local_port
  echo   username: $db_user

  echo Establishing SSH tunnel to $db_host via $username@$instanceIp. Ctrl-C to exit…
  ssh -L $db_local_port:$db_host:5432 -N $username@$instanceIp
}

function list_instances() {
  local stackQuery=$1
  local stackId=$(_choose_stack $stackQuery)
  # TODO map layer IDs to human-readable names
  # for reference, hash with ID as the key: jq '.Layers | map({(.LayerId): {name: .Name, shortname: .Shortname}}) | add'
  aws --region us-east-1 opsworks describe-instances --stack-id=$stackId |
    jq '[.Instances[] | {name: .Hostname, id: .InstanceId, ip: .PublicIp, layers: .LayerIds, status: .Status, type: .InstanceType}]'
}

function list_layers() {
  local stackQuery=$1
  local stackId=$(_choose_stack $stackQuery)
  aws --region us-east-1 opsworks describe-layers --stack-id=$stackId |
    jq '[.Layers[] | {id: .LayerId, name: .Name, shortname: .Shortname}]'
}

function list_stacks() {
  aws --region us-east-1 opsworks describe-stacks |
    jq '[.Stacks[] | {id: .StackId, name: .Name}]'
}

function connect_with_ssh() {
  local stackQuery=$1
  local instanceQuery=$2
  local stackId=$(_choose_stack $stackQuery)
  local instanceId=$(_choose_instance $stackId $instanceQuery)

  local username=$(_fetch_username)
  local instanceIp=$(_fetch_instance_details $instanceId PublicIp)

  # echo command when executing
  (set -x; ssh $username@$instanceIp)
}

main $*
