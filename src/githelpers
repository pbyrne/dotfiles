#!/bin/bash

# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>   add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%Cgreen(%ar)%Creset"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"

FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

show_git_head() {
  pretty_git_log -1
  git show -p --pretty="tformat:"
}

remove_ago_from_timestamps() {
  # Replace (2 years ago) with (2 years)
  sed -Ee 's/(^[^<]*) ago)/\1)/'
}

remove_extra_date_info() {
  # Replace (2 years, 5 months) with (2 years)
  sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?)/\1)/'
}

truncate_time_names() {
  # replace years with y, months with m, days with d
  sed -Ee 's/(^[^<]*) seconds?/\1s/' |
  sed -Ee 's/(^[^<]*) minutes?/\1m/' |
  sed -Ee 's/(^[^<]*) hours?/\1h/' |
  sed -Ee 's/(^[^<]*) days?/\1d/' |
  sed -Ee 's/(^[^<]*) weeks?/\1w/' |
  sed -Ee 's/(^[^<]*) years?/\1y/' |
  sed -Ee 's/(^[^<]*) months?/\1mo/'
}

columnize() {
  # Line columns up based on } delimiter
  column -s '}' -t
}

pretty_git_log() {
  git log --graph --pretty="tformat:${FORMAT}" $* |
    remove_ago_from_timestamps |
    remove_extra_date_info |
    truncate_time_names |
    columnize |
    # Page only if we need to
    less -FXRS
}

# Delete any branches locally which don't exist on remote (e.g., which have already been deleted)
delete_orphaned_local_branches() {
  for branch in $(locals_not_on_remote); do
    echo Deleting $branch
    git branch -d $branch
  done
}

locals_not_on_remote() {
  git branch | strip_current_branch_marker | strip_branches_on_remote
}

# clear the leading whitespace and the * from branches, so you end up with just
# bare branch names
strip_current_branch_marker() {
  cut -c 3-
}

# Remove from the list any branches which exist on the remote
strip_branches_on_remote() {
  while read branch; do
    git branch --remote | grep origin/$branch > /dev/null || echo $branch
  done
}
