# vim: syntax=gitconfig ft=gitconfig
# See: man gitconfig
# or http://www.kernel.org/pub/software/scm/git/docs/git-config.html
[core]
	# global ignore file
	excludesfile = ~/.gitexcludes
	quotepath = false
	# match the OS EOL character when checking out files
	autocrlf = input
[alias]
	a = add
	aa = add .
	# Files that are in the staging area
	added = diff --cached --name-only
	# edit the previous commit (don't use if already pushed)
	amend = commit --amend
	# sometimes i can't spell
	ammend = commit --amend
	br = branch
	# search for braches that contain the given commit
	branches-with = branch --all --contains
	# how is this not built into git?
	branchname = symbolic-ref --short -q HEAD
	# all branches, even remote
	brs = branch -a
	# display the diff to be committed when entring commit message
	c = commit --verbose
	co = checkout
	conflicts = "!$EDITOR $(git diff --name-only --diff-filter=U)"
	# choose from other local branches you have checked out, and check it out
	colist = "!select choice in $(git branch | grep -v '*'); do echo checking out $choice; git checkout $choice; break; done"
	d = diff
	# perform diff against the index (files that have been added but not committed)
	ds = diff --staged
	# list the files deleted but not committed
	deleted = ls-files --deleted
	# edit new and modified files
	edit = "!$EDITOR `git ls-files --modified --others --exclude-standard`"
	# also clean up branches deleted from the server
	f = fetch --prune
	freebase = !git fetch && git rebase origin/master
	autosquash = !git fetch && git rebase -i --autosquash origin/master
	# list the files in the repo, but using bash-like 'ls' command
	ls = ls-files
	m = merge
	# for use with forked repos, assumes the original repo's remote is named 'upstream'
	mergeupstream = !git fetch upstream && git merge upstream/master master
	# new branch with the given name
	nb = "!f() { git checkout -b $1; }; f"
	# Not yet added - doesn't include ignored files
	new = ls-files --others --exclude-standard
	p = "!f() { git push origin `git branchname`; }; f"
	# push and set the upstream
	pu = "!f() { git push --set-upstream origin `git branchname`; }; f"
	s = status
	st = status
	# show today's work
	today = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative
	u = pull --prune
	# remove file from the index - DOES NOT UNDO THE CHANGES
	unstage = reset HEAD
	orphans = "!source ~/.githelpers && locals_not_on_remote"
	deleteorphans = "!source ~/.githelpers && delete_orphaned_local_branches"
	empty = commit --allow-empty
	fixup = commit --fixup=HEAD
	squash = commit --squash=HEAD
[color]
	ui = auto
[format]
	# git log uses --pretty format by default, so this changes the default format
	# Now log uses --pretty by default
	# 4436819 Gabe Berke-Williams - One line prompt (2 hours ago)
	# pretty = %Cred%h%Creset %aN -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset
[push]
	# only push the current git branch, not all branches
	default = tracking
[fetch]
	# always prune when fetching
	prune = true
[diff]
	# Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
	# instead of a/b/c/d as prefixes for patches
	mnemonicprefix = true
	tool = opendiff
	algorithm = patience
[merge]
	tool = opendiff
	conflictstyle = diff3
[difftool]
	prompt = false
[mergetool]
	prompt = false
[rerere]
	# http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
	enabled = true
[hub]
	protocol = https
[branch]
	autosetuprebase = always
[url "git@github.com:tstmedia/"]
	insteadOf = gtst://
[url "git@github.com:pbyrne/"]
	insteadOf = gpb://
[url "git@github.com:/"]
	insteadOf = gh://
[credential]
	helper = osxkeychain
[status]
	short = 1
	branch = 1
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[user]
	name = Patrick Byrne
	email = 34053+pbyrne@users.noreply.github.com
