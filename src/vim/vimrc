set nocompatible " enable lots of cool vim-only features
set noesckeys " Prevent the small delay in adding blank newline with Shift+O after leaving insert mode; https://stackoverflow.com/questions/2158516/delay-before-o-opens-a-new-line
filetype off " required for vundle setup

" set up vundle iteself
set rtp+=~/.vim/bundle/vundle.vim
call vundle#rc()

" let Vundle manage Vundle required!
Plugin 'vundlevim/vundle.vim'

" and let's add some plugins
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rhubarb'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-vinegar'
Plugin 'tpope/vim-characterize'
Plugin 'junegunn/fzf.vim'
Plugin 'janko-m/vim-test'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'mileszs/ack.vim'
Plugin 'posva/vim-vue'
Plugin 'elixir-editors/vim-elixir'
Plugin 'avdgaag/vim-phoenix'
Plugin 'leafgarland/typescript-vim'
" Plugin 'prabirshrestha/vim-lsp'
Plugin 'dense-analysis/ale'
Plugin 'tpope/vim-projectionist'

" syntax
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-packer'
Plugin 'rust-lang/rust.vim'
Plugin 'tpope/vim-git'

" colorschemes
Plugin 'jacoborus/tender.vim'
Plugin 'jonathanfilip/vim-lucius'
Plugin 'morhetz/gruvbox'
Plugin 'lifepillar/vim-gruvbox8'
Plugin 'jaredgorski/SpaceCamp'
" Plugin 'file:///Users/patrickbyrne/.themes/dracula_pro/themes/vim'
Plugin 'arcticicestudio/nord-vim'
Plugin 'embark-theme/vim', {'name': 'embark'}
Plugin 'catppuccin/vim', {'name': 'catppuccin'}

" general
"let mapleader = ","
syntax enable " enable syntax highlighting
set encoding=utf-8 " default encoding
set termencoding=utf-8
set showcmd " display incomplete commands
filetype plugin indent on " load file type plugins and indentation
set showmatch " highlight the matching {("/")}
set number " Show line numbers
set cursorline " highlight the current line
set autoindent " perform auto-indentation
set autoread " automatically update changes from disk made outside of Vim
set shiftround " round to the nearest tabstop when tabbing
set scrolloff=2 " start scrolling within N lines of the top/bottom of the window
set sidescrolloff=5 " start scrolling within N lines of the left/right of the window
set title " show a window title, even in command-line vim
set visualbell " eliminate audio bells
set hidden " allow an unsaved buffer to become hidden (no longer the visible), and load its marks and undo history upon becoming visible again
set history=1000 " store command history FOREVER
set tabpagemax=50
set lazyredraw
set smarttab
set formatoptions+=j " Delete comment character when joining commented lines
" whitespace settings
set nowrap " don't wrap lines
set tabstop=2 shiftwidth=2 softtabstop=2 " 2 spaces for tabs
set expandtab " use spaces, not tabs
set backspace=indent,eol,start " backspace through everything
set list " display whitespace characters
set listchars=tab:>-,trail:Â·,extends:>,precedes:<,nbsp:+

" searching
set hlsearch " highlight matches
set incsearch " search incrementally
set ignorecase " case-insensitive search
set smartcase " unless there's a capital later

" status bar
set ruler " enable status bar at the bottom
set laststatus=2 " Status bar
" eliminate some extraneous garbage from messages
" a to truncate text as much as possible
" t to eliminate long file names
" I to skip vim's intro message
set shortmess=atI

" Tab completion
set wildmenu " enable tab completion
set wildmode=list:longest,list:full " promiscuous selection of available completions
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn " ignore these files for completion
set wildignore+=*.png,*.jpg,*.gif,*.ico,*.swf,*.psd,*.gem " and these binaries, too. mainly for command-t
set wildignore+=_site,cache,tmp " and auto-generated files
set wildignore+=_undo,_swp,_backup " and vim's backups
set wildignore+=node_modules " and npm-installed modules
set wildignore+=build
set wildignore+=.bundle/,.git/,.sass-cache/

" window splitting settings
set splitbelow
set splitright

set term=xterm-256color
if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  set t_ut=
endif

" Default color scheme
set t_Co=256 " 256 colors
set background=dark
" Legacy gruvbox
let g:gruvbox_bold="0"
let g:gruvbox_contrast_dark="soft"
let g:gruvbox_italicize_comments="1"
let g:gruvbox_invert_selection="0"
colorscheme gruvbox8

let g:dracula_colorterm = 0
let g:dracula_inverse = 0
" colorscheme dracula_pro

let g:embark_terminal_italics = 1
" colorscheme embark

" colorscheme nord

set backupdir=~/.tmp/.vim/_backup " specify location for backup files
set directory=~/.tmp/.vim/_swp " specify location for swp files
set undodir=~/.tmp/.vim/_undo " specify location of undo files

" Make those folders automatically if they don't already exist.
if !isdirectory(&undodir)
  call mkdir(&undodir, "p")
endif
if !isdirectory(&backupdir)
  call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
  call mkdir(&directory, "p")
endif

set undofile " persistent undo, even after closing and saving
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" force you to Do The Right Thing (don't use arrows to move)
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Easier access to beginning and end of line
nnoremap B ^
nnoremap E $

" Custom shortcuts
" clear the search term
nnoremap <leader><space> :noh<cr>
" jj to escape insert mode
inoremap jj <ESC>
" ug, and kk because i keep hitting it
inoremap kk <ESC>

" highlight last inserted text
nnoremap gV `[v`]

" open vim config
noremap <Leader>` :sp $MYVIMRC<CR>
autocmd BufWrite *.vim*,vimrc :source $MYVIMRC

" emulate MacVim keybindings
noremap <Leader>s :w<CR>
noremap <Leader>S :waW<CR>

" the "* register is the system clipboard
" cut the selection, if selected
vnoremap <Leader>x "*d
" cut the line if not in selection
nnoremap <Leader>x "*dd
" copy the selection, if selected
vnoremap <Leader>c "*y
" copy the line, if not in selection
nnoremap <Leader>c "*yy
" paste
noremap <Leader>v "*p
inoremap <Leader>v <ESC>"*pi
" paste before
noremap <Leader>V "*P
inoremap <Leader>V <ESC>"*Pi

" automatically strip whitespace from ends of ruby and ERB files
"autocmd BufWritePre *.rb,*.erb :%s/\s\+$//e
nnoremap <Leader>WS :%s/\s\+$//e<CR>

" CTags shortcuts
noremap <Leader>rt :!ctags .<CR><CR>
" open definition in a new tab
noremap <C-\> :sp <CR>:exec("tag ".expand("<cword>"))<CR>

:noremap <leader>p :PromoteToLet<cr>

" get out of here!
:command! -bang Q :qa<bang>
:command! -bang WQ :wa | :qa<bang>

" ack
noremap <Leader>a :Ack<space>
" ack for current word (based on cursor)
noremap <Leader>A :Ack<space><C-r><C-w>
" Ack only in files changed in the current branch
noremap <Leader>B :Ack<space><space>$(git changed-on-branch)<C-b><right><right><right><right>
:command -nargs=1 Back :Ack <args> $(git changed-on-branch)

" make %% map to the directory path containing the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Leader-][ to increase/decrease indentation
vnoremap > >gv
vnoremap < <gv

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" loop through the open windows
nnoremap <c-i> <c-w>w

if has("autocmd")
  " automatically leave insert mode after 15 seconds of inactivity
  autocmd CursorHoldI * stopinsert
  autocmd InsertEnter * let updaterestore=&updatetime | set updatetime=15000
  autocmd InsertLeave * let &updatetime=updaterestore
endif

noremap <leader>n :NextConflict<cr>

" Populate some helpful macros
let @h = 'xea:wdw' " convert from old Ruby hashes to new
let @n = ']q' " move to the next quickfix match

" Diable flashing (visual bell)
set t_vb=

" Load FZF libraries installed by Homebrew
set rtp+=/opt/homebrew/opt/fzf
" Load Linux bins
set rtp+=~/.fzf

noremap <c-p> :GFiles<cr>
noremap <c-b> :Buffers<cr>

nnoremap <leader>tt :w<CR>:TestFile<CR>
nnoremap <leader>tT :wa<CR>:TestFile<CR>
nnoremap <leader>tl :w<CR>:TestLast<CR>
nnoremap <leader>tn :w<CR>:TestNearest<CR>
nnoremap <leader>tv :TestVisit<CR>

let test#javascript#jest#executable = 'NODE_OPTIONS=--experimental-vm-modules npx jest'

nnoremap <silent> <Leader>T :call fzf#run({
  \ 'source':  'suggest-tests ' . bufname('%'),
  \   'sink':    'e',
  \   'options': '--multi --reverse',
  \   'down':    15
  \ })<CR>

" Complete from routes
inoremap <silent> <leader>r <C-x><C-r>
inoremap <expr> <c-x><c-r> fzf#complete({
  \ 'source':  'bin/rake routes',
  \ 'reducer': '<sid>parse_route'})
function! s:parse_route(selected)
  let l:squished = substitute(join(a:selected), '^\s\+', '', '')
  return split(l:squished)[0] . '_path'
endfunction

" Complete entire line
imap <c-x><c-l> <plug>(fzf-complete-buffer-line)
imap <silent> <leader>l <plug>(fzf-complete-buffer-line)

" Don't apply editorconfig values to Fugitive view
let g:EditorConfig_exclude_patterns = ['fugitive://.\*']

" If a .vimlocal exists, source it
silent! so .vimlocal

nnoremap <silent> <Leader>gc :call fzf#run({'source':  'git changed-on-branch', 'sink': 'e', 'options': '--multi --reverse', 'down':    15})<CR>

let g:terraform_fmt_on_save = 1
let g:packer_fmt_on_save = 1
