#!/usr/bin/env ruby
# vim: ft=ruby

require "date"
require "fileutils"
require "pathname"
require "yaml"

PRIVATE_DOTFILES = Pathname.new("~/Library/Mobile\ Documents/com\~apple\~CloudDocs/dotfiles").expand_path

def main
  symlink_dotfiles
  symlink_private_dotfiles
  symlink_bin
end

def symlink_dotfiles
  # inspired heavily from https://github.com/henrik/dotfiles/blob/master/Rakefile and https://github.com/ryanb/dotfiles/blob/master/Rakefile
  Dir["src/*"].each do |file|
    # full path to file
    source = File.join(Dir.pwd, file)
    # just the file name
    basename = File.basename(file)
    # where we want it to be
    destination = File.expand_path("~/.#{basename}")

    conditionally_symlink(source, destination)
  end
end

def symlink_private_dotfiles
  manifest_path = PRIVATE_DOTFILES.join("manifest.yml")
  if File.exist?(manifest_path)
    manifest = YAML.load_file(manifest_path)
    manifest.each do |orig, dest|
      conditionally_symlink("#{PRIVATE_DOTFILES}/#{orig}", "~/#{dest}")
    end
  else
    puts "  #{manifest_path} does not exist, cannot continue"
  end
end

def symlink_bin
  conditionally_symlink(File.join(Dir.pwd, "src", "bin"), File.expand_path("~/bin"))
end

def conditionally_symlink(source, destination)
  source = File.expand_path(source)
  destination = File.expand_path(destination)
  if File.exist?(source)
    if File.symlink?(destination)
      symlink_to = File.readlink(destination)
      if symlink_to == source
        puts "  #{destination} already symlinked, nothing to do"
      else
        puts "  relinking #{destination} from #{symlink_to} to #{source}"
        FileUtils.rm(destination)
        FileUtils.ln_s(source, destination)
      end
    elsif File.exist?(destination)
      # tack on today's date in YYYYMMDD
      backup_location = "#{destination}.#{Date.today.strftime("%Y%m%d")}"
      puts "  #{destination} already exists. Backing up to #{backup_location}"
      FileUtils.mv(destination, backup_location)
      FileUtils.ln_s(source, destination)
    else
      puts "  creating symlink for #{destination}"
      FileUtils.ln_s(source, destination)
    end
  else
    puts "  #{source} doesn't exist, cannot create symlink"
  end
end

main
